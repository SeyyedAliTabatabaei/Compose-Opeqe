package ir.composeopeqe.dataimport androidx.room.TypeConverterimport com.google.gson.reflect.TypeTokenimport com.google.gson.Gsonimport java.lang.reflect.Typeclass NameConventer {    @TypeConverter    fun toNameInfo(nameInfo : String):Name {        val type = object : TypeToken<Name>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toNameInfoJson(nameInfo : Name) : String {        val type = object :TypeToken<Name>(){}.type        return Gson().toJson(nameInfo,type)    }}class LocationConventer {    @TypeConverter    fun toLocationInfo(nameInfo : String):Location {        val type = object : TypeToken<Location>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toLocationInfoJson(nameInfo : Location) : String {        val type = object :TypeToken<Location>(){}.type        return Gson().toJson(nameInfo,type)    }}class CoordinatesConventer {    @TypeConverter    fun toCoordinatesInfo(nameInfo : String):Coordinates {        val type = object : TypeToken<Coordinates>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toCoordinatesInfoJson(nameInfo : Coordinates) : String {        val type = object :TypeToken<Coordinates>(){}.type        return Gson().toJson(nameInfo,type)    }}class TimezoneConventer {    @TypeConverter    fun toTimezoneInfo(nameInfo : String):Timezone {        val type = object : TypeToken<Timezone>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toTimezoneInfoJson(nameInfo : Timezone) : String {        val type = object :TypeToken<Timezone>(){}.type        return Gson().toJson(nameInfo,type)    }}class LoginConventer {    @TypeConverter    fun toLoginInfo(nameInfo : String):Login {        val type = object : TypeToken<Login>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toLoginInfoJson(nameInfo : Login) : String {        val type = object :TypeToken<Login>(){}.type        return Gson().toJson(nameInfo,type)    }}class DobConventer {    @TypeConverter    fun toDobInfo(nameInfo : String):Dob {        val type = object : TypeToken<Dob>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toDobInfoJson(nameInfo : Dob) : String {        val type = object :TypeToken<Dob>(){}.type        return Gson().toJson(nameInfo,type)    }}class RegisteredConventer {    @TypeConverter    fun toRegisteredInfo(nameInfo : String):Registered {        val type = object : TypeToken<Registered>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toRegisteredInfoJson(nameInfo : Registered) : String {        val type = object :TypeToken<Registered>(){}.type        return Gson().toJson(nameInfo,type)    }}class IdConventer {    @TypeConverter    fun toIdInfo(nameInfo : String):Id {        val type = object : TypeToken<Id>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toIdInfoJson(nameInfo : Id) : String {        val type = object :TypeToken<Id>(){}.type        return Gson().toJson(nameInfo,type)    }}class PictureConventer {    @TypeConverter    fun toPictureInfo(nameInfo : String):Picture {        val type = object : TypeToken<Picture>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toPictureInfoJson(nameInfo : Picture) : String {        val type = object :TypeToken<Picture>(){}.type        return Gson().toJson(nameInfo,type)    }}class InfoConventer {    @TypeConverter    fun toInfo(nameInfo : String):Info {        val type = object : TypeToken<Info>() {}.type        return Gson().fromJson(nameInfo, type)    }    @TypeConverter    fun toInfoJson(nameInfo : Info) : String {        val type = object :TypeToken<Info>(){}.type        return Gson().toJson(nameInfo,type)    }}